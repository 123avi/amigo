---
AWSTemplateFormatVersion: '2010-09-09'
Description: AMIgo, an AMI bakery
Parameters:
  Stage:
    Description: Stage name
    Type: String
    Default: PROD
  VPC:
    Description: Virtual Private Cloud to run EC2 instances within
    Type: AWS::EC2::VPC::Id
  Subnets:
    Description: Subnets to run load balancer within
    Type: List<AWS::EC2::Subnet::Id>
  AMI:
    Description: AMI ID
    Type: String
    Default: ami-6b50e218
  PackerVersion:
    Description: What version of Packer to install
    Type: String
    Default: 0.8.6

Resources:

  RootRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal: { Service: [ec2.amazonaws.com] }
          Action: ['sts:AssumeRole']

  PackerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: packer-bake-ami
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - 'ec2:AttachVolume'
          - 'ec2:CreateVolume'
          - 'ec2:DeleteVolume'
          - 'ec2:CreateKeypair'
          - 'ec2:DeleteKeypair'
          - 'ec2:DescribeSubnets'
          - 'ec2:CreateSecurityGroup'
          - 'ec2:DeleteSecurityGroup'
          - 'ec2:AuthorizeSecurityGroupIngress'
          - 'ec2:CreateImage'
          - 'ec2:CopyImage'
          - 'ec2:RunInstances'
          - 'ec2:TerminateInstances'
          - 'ec2:StopInstances'
          - 'ec2:DescribeVolumes'
          - 'ec2:DetachVolume'
          - 'ec2:DescribeInstances'
          - 'ec2:CreateSnapshot'
          - 'ec2:DeleteSnapshot'
          - 'ec2:DescribeSnapshots'
          - 'ec2:DescribeImages'
          - 'ec2:RegisterImage'
          - 'ec2:CreateTags'
          - 'ec2:ModifyImageAttribute'
          Resource: '*'
      Roles:
      - Ref: RootRole

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: RootRole

  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      Subnets: { Ref: Subnets }
      CrossZone: true
      Listeners:
      - Protocol: HTTP
        LoadBalancerPort: '80'
        InstancePort: '9000'
      HealthCheck:
        Target: HTTP:9000/
        Timeout: '5'
        Interval: '10'
        UnhealthyThreshold: '2'
        HealthyThreshold: '2'

  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        Ref: Subnets
      AvailabilityZones:
        Fn::GetAZs: ''
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: '1'
      MaxSize: '2'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LoadBalancerNames:
      - Ref: LoadBalancer
      Tags:
      - Key: Stage
        PropagateAtLaunch: 'true'
        Value: { Ref: Stage }
      - Key: Stack
        PropagateAtLaunch: 'true'
        Value: deploy
      - Key: App
        PropagateAtLaunch: 'true'
        Value: amigo

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Ref: AMI
      AssociatePublicIpAddress: true
      SecurityGroups:
      - Ref: ApplicationSecurityGroup
      InstanceType: t2.micro
      IamInstanceProfile:
        Ref: InstanceProfile
      UserData:
        Fn::Base64: |
          #!/bin/bash -ev
          adduser --system --home /home/amigo --disabled-password amigo
          aws --region eu-west-1 s3 cp s3://deploy-tools-dist/deploy/PROD/amigo/amigo.service /etc/systemd/system
          aws --region eu-west-1 s3 cp s3://deploy-tools-dist/deploy/PROD/amigo/amigo.tgz /home/amigo
          tar xfv -C /home/amigo /home/amigo/amigo.tgz
          mv /home/amigo/amigo-1.0-SNAPSHOT /home/amigo/amigo
          chown -R amigo /home/amigo

          # TODO download and install Packer, and add to PATH

          systemctl start amigo

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Guardian IP range has access to the load balancer on port 80
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 77.91.248.0/21
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        CidrIp: 0.0.0.0/0

  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH and HTTP
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        CidrIp: 77.91.248.0/21
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        SourceSecurityGroupId: { Ref: LoadBalancerSecurityGroup }
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 77.91.248.0/21
